---- >> Matches (92 in 17 files) ----
Core_cm3.h (libraries\cmsis):  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
Core_cm3.h (libraries\cmsis):  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
Core_cm3.h (libraries\cmsis):  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
Core_cm3.h (libraries\cmsis):  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
Core_cm3.h (libraries\cmsis):  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
Core_cm3.h (libraries\cmsis):  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
Core_cm3.h (libraries\cmsis):  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
Core_cm3.h (libraries\cmsis):    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M3 system interrupts */
Core_cm3.h (libraries\cmsis):    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
Core_cm3.h (libraries\cmsis):  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
Misc.c (libraries\fwlib\src):    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
Misc.c (libraries\fwlib\src):    tmpsub = tmpsub >> tmppriority;
Misc.c (libraries\fwlib\src):    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
Misc.c (libraries\fwlib\src):    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
Stm32f10x_adc.c (libraries\fwlib\src):  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
Stm32f10x_adc.c (libraries\fwlib\src):  itmask = ADC_IT >> 8;
Stm32f10x_adc.c (libraries\fwlib\src):  itmask = (uint8_t)(ADC_IT >> 8);
Stm32f10x_can.c (libraries\fwlib\src):    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
Stm32f10x_can.c (libraries\fwlib\src):    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
Stm32f10x_can.c (libraries\fwlib\src):  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
Stm32f10x_can.c (libraries\fwlib\src):  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
Stm32f10x_can.c (libraries\fwlib\src):  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
Stm32f10x_cec.c (libraries\fwlib\src):  cecreg = CEC_FLAG >> 28;
Stm32f10x_cec.c (libraries\fwlib\src):    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
Stm32f10x_dac.c (libraries\fwlib\src):    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
Stm32f10x_dac.c (libraries\fwlib\src):    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
Stm32f10x_dac.c (libraries\fwlib\src):  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
Stm32f10x_dbgmcu.c (libraries\fwlib\src):   return(DBGMCU->IDCODE >> 16);
Stm32f10x_flash.c (libraries\fwlib\src):        *(__IO uint16_t*) tmp = Data >> 16;
Stm32f10x_flash.c (libraries\fwlib\src):      *(__IO uint16_t*) tmp = Data >> 16;
Stm32f10x_flash.c (libraries\fwlib\src):        *(__IO uint16_t*) tmp = Data >> 16;
Stm32f10x_flash.c (libraries\fwlib\src):      *(__IO uint16_t*) tmp = Data >> 16;
Stm32f10x_flash.c (libraries\fwlib\src):  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
Stm32f10x_flash.c (libraries\fwlib\src):  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
Stm32f10x_flash.c (libraries\fwlib\src):  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
Stm32f10x_flash.c (libraries\fwlib\src):  return (uint32_t)(FLASH->OBR >> 2);
Stm32f10x_fsmc.c (libraries\fwlib\src):  itenable = tmpsr & (FSMC_IT >> 3);
Stm32f10x_fsmc.c (libraries\fwlib\src):    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
Stm32f10x_fsmc.c (libraries\fwlib\src):    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
Stm32f10x_fsmc.c (libraries\fwlib\src):    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
Stm32f10x_gpio.c (libraries\fwlib\src):  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
Stm32f10x_gpio.c (libraries\fwlib\src):    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
Stm32f10x_gpio.c (libraries\fwlib\src):    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
Stm32f10x_gpio.c (libraries\fwlib\src):  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
Stm32f10x_gpio.c (libraries\fwlib\src):  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
Stm32f10x_i2c.c (libraries\fwlib\src):  return ((I2Cx->SR2) >> 8);
Stm32f10x_i2c.c (libraries\fwlib\src):  i2creg = I2C_FLAG >> 28;
Stm32f10x_i2c.c (libraries\fwlib\src):    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
Stm32f10x_i2c.c (libraries\fwlib\src):  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
Stm32f10x_rcc.c (libraries\fwlib\src):      pllmull = ( pllmull >> 18) + 2;
Stm32f10x_rcc.c (libraries\fwlib\src):        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
Stm32f10x_rcc.c (libraries\fwlib\src):          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
Stm32f10x_rcc.c (libraries\fwlib\src):      pllmull = pllmull >> 18;
Stm32f10x_rcc.c (libraries\fwlib\src):        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
Stm32f10x_rcc.c (libraries\fwlib\src):          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
Stm32f10x_rcc.c (libraries\fwlib\src):          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
Stm32f10x_rcc.c (libraries\fwlib\src):  tmp = tmp >> 4;
Stm32f10x_rcc.c (libraries\fwlib\src):  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
Stm32f10x_rcc.c (libraries\fwlib\src):  tmp = tmp >> 8;
Stm32f10x_rcc.c (libraries\fwlib\src):  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
Stm32f10x_rcc.c (libraries\fwlib\src):  tmp = tmp >> 11;
Stm32f10x_rcc.c (libraries\fwlib\src):  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
Stm32f10x_rcc.c (libraries\fwlib\src):  tmp = tmp >> 14;
Stm32f10x_rcc.c (libraries\fwlib\src):  tmp = RCC_FLAG >> 5;
Stm32f10x_rtc.c (libraries\fwlib\src):  RTC->CNTH = CounterValue >> 16;
Stm32f10x_rtc.c (libraries\fwlib\src):  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
Stm32f10x_rtc.c (libraries\fwlib\src):  RTC->ALRH = AlarmValue >> 16;
Stm32f10x_spi.c (libraries\fwlib\src):      tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
Stm32f10x_spi.c (libraries\fwlib\src):      sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
Stm32f10x_spi.c (libraries\fwlib\src):  itpos = SPI_I2S_IT >> 4;
Stm32f10x_spi.c (libraries\fwlib\src):  itmask = SPI_I2S_IT >> 4;
Stm32f10x_tim.c (libraries\fwlib\src):    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
Stm32f10x_usart.c (libraries\fwlib\src):  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
Stm32f10x_usart.c (libraries\fwlib\src):  usartreg = (((uint8_t)USART_IT) >> 0x05);
Stm32f10x_usart.c (libraries\fwlib\src):  usartreg = (((uint8_t)USART_IT) >> 0x05);
Stm32f10x_usart.c (libraries\fwlib\src):  bitpos = USART_IT >> 0x08;
Stm32f10x_usart.c (libraries\fwlib\src):  bitpos = USART_IT >> 0x08;
System_stm32f10x.c (libraries\cmsis):      pllmull = ( pllmull >> 18) + 2;
System_stm32f10x.c (libraries\cmsis):        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
System_stm32f10x.c (libraries\cmsis):          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
System_stm32f10x.c (libraries\cmsis):      pllmull = pllmull >> 18;
System_stm32f10x.c (libraries\cmsis):        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
System_stm32f10x.c (libraries\cmsis):          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
System_stm32f10x.c (libraries\cmsis):          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
System_stm32f10x.c (libraries\cmsis):  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
System_stm32f10x.c (libraries\cmsis):  SystemCoreClock >>= tmp;  
---- >> Search Errors Encountered (1) ----
The following 1 files could not be processed:
E:\stm32_text\À¶ÑÀ\focus-master\focus-master\Output\Á÷Ë®µÆ.build_log.htm : File could not be opened.
